#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2016 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

if [ ! -f variables ]; then
   echo
   echo "No variables file found in current directory"
   echo
   exit
fi

source variables

echo > misc/hosts-file
echo "# --------------------------" >> misc/hosts-file
echo "#  Generate by Hopper-Stack " >> misc/hosts-file
echo "# --------------------------" >> misc/hosts-file

# haproxy
echo "$VIPSERVXIP	$VIPSERVXHN	$VIPSERVXHN.$DNSDOMAIN" >> /tmp/hosts-file
total=`cat variables | grep ^HAPROXY[0-9]IP | cut -f2 -d= | wc -l`
let total=total+1
let count=1
while [ $count -lt $total ]; do
   eval TM1=HAPROXY${count}IP
   IP=`cat variables | grep ^$TM1 | cut -f2 -d=`
   eval TM2=HAPROXY${count}HN
   HN=`cat variables | grep ^$TM2 | cut -f2 -d=`
   echo "$IP	$HN	$HN.$DNSDOMAIN" >> /tmp/hosts-file
   let count=count+1
done

# controller
total=`cat variables | grep ^CONTRL[0-9]IP | cut -f2 -d= | wc -l`
let total=total+1
let count=1
while [ $count -lt $total ]; do
   eval TM1=CONTRL${count}IP
   IP=`cat variables | grep ^$TM1 | cut -f2 -d=`
   eval TM2=CONTRL${count}HN
   HN=`cat variables | grep ^$TM2 | cut -f2 -d=`
   echo "$IP    $HN	$HN.$DNSDOMAIN" >> /tmp/hosts-file
   let count=count+1
done

# network
total=`cat variables | grep ^NETWORK[0-9]IP | cut -f2 -d= | wc -l`
let total=total+1
let count=1
while [ $count -lt $total ]; do
   eval TM1=NETWORK${count}IP
   IP=`cat variables | grep ^$TM1 | cut -f2 -d=`
   eval TM2=NETWORK${count}HN
   HN=`cat variables | grep ^$TM2 | cut -f2 -d=`
   echo "$IP    $HN	$HN.$DNSDOMAIN" >> /tmp/hosts-file
   let count=count+1
done

# storage
total=`cat variables | grep ^STORAGE[0-9]IP | cut -f2 -d= | wc -l`
let total=total+1
let count=1
while [ $count -lt $total ]; do
   eval TM1=STORAGE${count}IP
   IP=`cat variables | grep ^$TM1 | cut -f2 -d=`
   eval TM2=STORAGE${count}HN
   HN=`cat variables | grep ^$TM2 | cut -f2 -d=`
   echo "$IP    $HN	$HN.$DNSDOMAIN" >> /tmp/hosts-file
   let count=count+1
done

# compute
total=`cat variables | grep ^COMPUTE[0-9]IP | cut -f2 -d= | wc -l`
let total=total+1
let count=1
while [ $count -lt $total ]; do
   eval TM1=COMPUTE${count}IP
   IP=`cat variables | grep ^$TM1 | cut -f2 -d=`
   eval TM2=COMPUTE${count}HN
   HN=`cat variables | grep ^$TM2 | cut -f2 -d=`
   echo "$IP    $HN	$HN.$DNSDOMAIN" >> /tmp/hosts-file
   let count=count+1
done

# support services
if [ x$ENABLE_AMANDA == xTrue ]; then
   echo "$BCKUPSERVER	$BCKUPSHN	$BCKUPSHN.$DNSDOMAIN" >> /tmp/hosts-file
fi
if [ x$ENABLE_NAGIOS == xTrue ]; then
   echo "$NAGIOSSERVER	$NAGIOSSERVHN	$NAGIOSSERVHN.$DNSDOMAIN" >> /tmp/hosts-file
fi
if [ x$ENABLE_DNS == xTrue ]; then
   echo "$DNSSERVERIP	$DNSSERVERHN	$DNSSERVERHN.$DNSDOMAIN" >> /tmp/hosts-file
fi
if [ x$ENABLE_SQUID == xTrue ]; then
   echo "$SQUIDDSERVERIP	$SQUIDDSERVERHN	$SQUIDDSERVERHN.$DNSDOMAIN" >> /tmp/hosts-file
fi
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   echo "$LOGSTASHIP	$LOGSTASHHN	$LOGSTASHHN.$DNSDOMAIN" >> /tmp/hosts-file
fi
echo "$FILESERVER	$FILESERVERHN	$FILESERVERHN.$DNSDOMAIN" >> /tmp/hosts-file
echo "$NTPSERVER	$NTPCONFIGHN	$NTPCONFIGHN.$DNSDOMAIN" >> /tmp/hosts-file

cat /tmp/hosts-file | sort -u >> misc/hosts-file

# add amandahosts
if [ x$ENABLE_AMANDA == xTrue ]; then
   sed -i "/^$BCKUPSERVER/ s/$/ amandahosts/" misc/hosts-file
fi

rm -f /tmp/hosts-file

