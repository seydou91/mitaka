#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2016 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

# +------------------------------------------+
# | VARIABLES                                |
# +------------------------------------------+
if [ ! -f profile ]; then
   echo
   echo " +-------------------------------------------+"
   echo " |  No profile file found in this directory  |"
   echo " +-------------------------------------------+"
   echo
   exit
else
   source profile
fi

if [ x$MGTVLAN == xTrue ]; then
   if [[ x$1 == x || x$2 == x ]]; then
     echo " +-------------------------------------------------------+"
     echo " |  Usage ./create-teannt <tenant> <password> <VLAN ID>  |"
     echo " +-------------------------------------------------------+"
     echo
     exit
   fi
else
   if [ x$1 == x ]; then
     echo
     echo " +-------------------------------------------------------+"
     echo " |      Usage ./create-teannt <tenant> <password>        |"
     echo " +-------------------------------------------------------+"
     echo
     exit
   fi
fi

xproject=$1
xpass=$2
vlanid=$3

source admin-openrc.sh
openstack project create --description "$xproject Tenant" $xproject
openstack user create --password $xproject $xproject
openstack role create $xproject
openstack role add --project $xproject --user $xproject $xproject

mkdir $xproject
cd $xproject
echo "export OS_PROJECT_DOMAIN_ID=default" > $xproject-openrc.sh
echo "export OS_USER_DOMAIN_ID=default" >> $xproject-openrc.sh
echo "export OS_PROJECT_NAME=$xproject" >> $xproject-openrc.sh
echo "export OS_TENANT_NAME=$xproject" >> $xproject-openrc.sh
echo "export OS_USERNAME=$xproject" >> $xproject-openrc.sh
echo "export OS_PASSWORD=$xpass" >> $xproject-openrc.sh
echo "export OS_AUTH_URL=http://$VIP_ADDRESS:5000/v3" >> $xproject-openrc.sh
echo "export OS_REGION_NAME=RegionOne" >> $xproject-openrc.sh
echo "export OS_IMAGE_API_VERSION=2" | tee -a $xproject-openrc.sh

# +------------------------------------------+
# | PROJECT KEYPAIR                          |
# +------------------------------------------+
source $xproject-openrc.sh
KEYCHK=`nova keypair-list | grep key-$xproject | awk '{print $2}'`
if [ x$KEYCHK == x ]; then
   nova keypair-add key-$xproject > key-$xproject.pem
   chmod 600 key-$xproject.pem
fi

# +------------------------------------------+
# | PROJECT NETWORK                          |
# +------------------------------------------+
echo " Create $xproject-net client network"
neutron net-create $xproject-net
sleep 1

echo " Create $xproject-net subnet"
echo "    software defined subnet chosen on 20.10.10.x"
neutron subnet-create $xproject-net 20.10.10.0/24 \
--name $xproject-subnet \
--dns-nameserver 8.8.8.8 \
--gateway 20.10.10.254
sleep 1

echo " Create $xproject-router"
neutron router-create $xproject-router
sleep 1

echo " Map router interface to $xproject-subnet"
neutron router-interface-add $xproject-router $xproject-subnet
sleep 1

echo " Map the $xproject-router gateway ext-net"
neutron router-gateway-set $xproject-router ext-net
sleep 1
echo

# +------------------------------------------+
# | PROJECT VLAN NETWORK                     |
# +------------------------------------------+
if [[ x$MGTVLAN == xTrue && x$vlanid != x ]]; then
   SUBNT=`cat $installdir/profile | grep MGTPROJGW | awk -F= '{print $2}' \
   | rev | cut -d. -f2- | rev`
   STRT=`cat $installdir/profile | grep MGTRANGE | awk -F= '{print $2}' \
   | awk -F- '{print $1}' | sed -e 's/\s//g'`
   END=`cat $installdir/profile | grep MGTRANGE | awk -F= '{print $2}' \
   | awk -F- '{print $2}' | sed -e 's/\s//g'`
   GW=`cat $installdir/profile | grep MGTPROJGW | awk -F= '{print $2}' \
   | sed -e 's/\s//g'`

   www="${SUBNT}.${STRT}"
   xxx="${SUBNT}.${END}"
   yyy=${GW}
   zzz=${SUBNT}

   echo " +-----------+"
   echo " |  Details  |"
   echo " +-----------+"
   echo " VLAN ID: $vlanid"
   echo " Gateway:$yyy, Subnet:$zzz"

   source $installdir/admin-openrc.sh

   # project id
   tenant=`openstack project list | grep $xproject | awk '{print $2}'`
   sleep 1

   # project VLAN network
   neutron net-create --tenant-id $tenant $xproject-$vlanid \
   --provider:network_type vlan \
   --provider:physical_network physnet2 \
   --provider:segmentation_id $vlanid
   sleep 1

   source $xproject-openrc.sh

   # pojrect VLAN subnet
   neutron subnet-create $xproject-$vlanid ${SUBNT}.0/24 \
   --name $xproject-vlansubnet \
   --dns-nameserver 8.8.8.8 \
   --gateway $GW
   sleep 1
fi

# +------------------------------------------+
# | PROJECT SECURITY GROUP                   |
# +------------------------------------------+
echo " Create Hopper default security group"
source $installdir/$xproject/$xproject-openrc.sh

TESTGRP=`neutron security-group-list | grep hopper-defaults | awk '{print $4}'`
if [ x$TESTGRP == x ];then
   echo
   echo "Creating Hopper default security group"
   neutron security-group-create hopper-defaults \
   --description "Hopper default security group"

   # allow incoming HTTP
   neutron security-group-rule-create --direction ingress --protocol tcp \
   --port_range_min 80 --port_range_max 80 hopper-defaults

   # allow incoming HTTPS
   neutron security-group-rule-create --direction ingress --protocol tcp \
   --port_range_min 443 --port_range_max 443 hopper-defaults

   # allow incoming SSH
   neutron security-group-rule-create --direction ingress --protocol tcp \
   --port_range_min 22 --port_range_max 22 hopper-defaults

   # allow incoming RDP
   neutron security-group-rule-create --direction ingress --protocol tcp \
   --port_range_min 3389 --port_range_max 3389 hopper-defaults
fi

echo " Available networks"
nova network-list

# +------------------------------------------+
# | PROJECT QUOTA                            |
# +------------------------------------------+
echo " Modifying tenant quotas"
source $installdir/admin-openrc.sh
tenant=$(openstack project list | grep $xproject | awk '{print $2}')
nova quota-update --instances $MAXINSTANCES $tenant
nova quota-update --cores $MAXCORES $tenant
nova quota-update --ram $MAXRAM $tenant
nova quota-update --floating-ips $MAXFLOATIPS $tenant
nova quota-show --tenant $tenant

echo " Modifying cinder quotas"
cinder quota-update --volumes $MAXVOLUMES $tenant
cinder quota-update --gigabytes $MAXSTORAGE $tenant
cinder quota-update --snapshots $MAXSNAPSHOTS $tenant

echo " Modifying neutron quotas"
neutron quota-update --tenant_id $tenant --floatingip $MAXFLOATIPS

