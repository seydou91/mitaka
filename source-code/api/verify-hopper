#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2016 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

ERROR=False

# ------------------------------------------------------------------
#  source the credentials
# ------------------------------------------------------------------
if [ ! -f profile ]; then
   echo
   echo "No profile file found in current directory"
   echo
   exit
else
   source profile
fi
cd $installdir
source $installdir/profile
source $installdir/admin-openrc.sh

# ------------------------------------------------------------------
#  Rabbit Message Queue
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Rabbit Status "
tput setaf 9; tput sgr0; tput cup 3 5
echo
rabbitmqctl cluster_status
count=`rabbitmqctl cluster_status | grep running_nodes | sed 's/rabbit/\n&\n/g' | grep -cx 'rabbit'`
if [ $count != 3 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  MySQL Database
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking MySQL Status "
tput setaf 9; tput sgr0; tput cup 3 5
echo
count=`mysql -h ${VIPSERVXHN} --port 3306 -u haproxy_root -p${SQLPASS} -e "show global status like 'wsrep_%'" | grep wsrep_incoming_addresses | sed 's/3306/\n&\n/g' | grep -cx '3306'` > /dev/null 2>&1
mysql -h ${VIPSERVXHN} --port 3306 -u haproxy_root -p${SQLPASS} -e "show global status like 'wsrep_%'" | grep wsrep_incoming_addresses
if [ $count != 3 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  MySQL Database
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking MySQL Backup "
tput setaf 9; tput sgr0; tput cup 3 5
echo
check=`ls /var/log/mariadb-backup | wc -l`
ls /var/log/mariadb-backup
if [ $check -lt 10 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Keystone Authentication
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Keystone Status "
tput setaf 9; tput sgr0; tput cup 3 5
echo
datechk=`date +"%Y"`
check=`openstack token issue | grep $datechk | awk '{print $1}'`
openstack user list
if [ x$check == x ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   tput setaf 2
   echo
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Image Download
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Cirros Image Loaded "
tput setaf 9; tput sgr0; tput cup 3 5
echo
check=`nova image-list | grep cirros | head -1 | awk '{print $2}'`
nova image-list
if [ x$check == x ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  NOVA Status
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Nova Status "
tput setaf 9; tput sgr0; tput cup 3 5
echo
check1=`nova service-list | grep nova | wc -l`
check2=`nova service-list | grep "| up" | wc -l`
nova service-list
if [ x$check1 != x$check2 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Neutron Status
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Neutron Status "
tput setaf 9; tput sgr0; tput cup 3 5
echo
check1=`neutron agent-list | grep "neutron-" | wc -l`
check2=`neutron agent-list | grep ":-)" | wc -l`
neutron agent-list
if [ x$check1 != x$check2 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Cinder Status
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Cinder Status "
tput setab 0; tput setaf 7; tput sgr0
echo
cinder service-list
check1=`cinder service-list | grep cinder- | wc -l`
check2=`cinder service-list | grep "|   up" | wc -l`
if [ x$check1 != x$check2 ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Cinder Volume
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Cinder Volume Creation "
tput setaf 9; tput sgr0; tput cup 3 5
echo
source $installdir/$PROJECT-openrc.sh

GLANCEID=`glance image-list | grep cirros | awk '{print $2}' | head -1`
glance image-download $GLANCEID > /tmp/cirros.img
rm -rf /tmp/cirros.img

volname=demovol

AZ=`nova availability-zone-list | grep available | awk '{print $2}' | head -1`
cinder create --availability-zone $AZ --display-name $PROJECT-$volname 1
sleep 5

cinder list
check=`cinder list | grep $PROJECT-$volname | awk '{print $2}' | head -1`
cinder delete $check
source $installdir/admin-openrc.sh

if [ x$check == x ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Checking Swift Status 
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Swift Object-Store Creation " 
tput setaf 9; tput sgr0; tput cup 3 5
echo
source $installdir/$PROJECT-openrc.sh
file=hopper-swift.file
cont=$PROJECT-container

source $installdir/$PROJECT-openrc.sh
echo " Create $file file"
date > $file
echo
echo " Create $cont container"
swift -V 3 post $cont
echo
sleep 2
echo -n " Upload file to swift: "
swift -V 3 upload $cont $file
echo
sleep 2
rm -f $file
cd /tmp
echo -n " Download file: "
swift -V 3 download $cont $file
echo
rm -rf $file
sleep 2
echo " List containers: "
swift -V 3 list
echo
echo -n " List objects: "
swift -V 3 list $cont
check=`swift -V 3 list $cont | grep $file`
echo
echo " Removing objects and containers"
swift -V 3 delete $cont
if [ x$check == x ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Glance Images
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Checking Glance Swift Repository "
tput setaf 9; tput sgr0; tput cup 3 5
echo
source $installdir/$PROJECT-openrc.sh
glance image-list
swift -V 3 list
check=`swift -V 3 list | grep glance_[0-9a-zA-Z] | head -1`

if [ x$check == x ]; then
   ERROR=True
   echo
   tput setaf 1
   echo " [FAIL]"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo " [OK]"
   tput setaf 7
   echo
fi
echo -n " > "
read

# ------------------------------------------------------------------
#  Ceilometer Status
# ------------------------------------------------------------------
if [ x$CEILOMETER == xTrue ]; then
   clear; echo
   tput cup 2 5; tput setab 4; tput bold; tput setaf 7
   echo " Checking Telemetry Status "
   tput setaf 9; tput sgr0; tput cup 3 5
   echo

   source $installdir/$PROJECT-openrc.sh
   export OS_AUTH_URL=http://${VIPSERVXHN}:35357/
   unset OS_PROJECT_DOMAIN_ID OS_USER_DOMAIN_ID
   ceilometer meter-list | head -10

   export OS_AUTH_URL=http://${VIPSERVXHN}:35357/
   unset OS_PROJECT_DOMAIN_ID OS_USER_DOMAIN_ID
   GLANCEID=`glance image-list | grep cirros | awk '{print $2}' | head -1`
   glance image-download $GLANCEID > /tmp/cirros.img
   sleep 10
   ceilometer statistics -m image.download -p 120

   source $installdir/admin-openrc.sh
   export OS_AUTH_URL=http://${VIPSERVXHN}:35357/
   unset OS_PROJECT_DOMAIN_ID OS_USER_DOMAIN_ID
   check=`ceilometer statistics -m image.download -p 120 | grep 120 | \
   awk '{print $2}' | head -1`

   if [ x$check == x ]; then
      ERROR=True
      echo
      tput setaf 1
      echo " [FAIL]"
      tput setaf 7
      echo
   else
      echo
      tput setaf 2
      echo " [OK]"
      tput setaf 7
      echo
   fi
   echo -n " > "
   read
fi

# ------------------------------------------------------------------
#  Heat Orchestration Check
# ------------------------------------------------------------------
clear; echo
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Heat Orchestration "
tput setaf 9; tput sgr0; tput cup 3 5
echo

echo -n " About to provision ([y]/n): "
read ans
if [ x${ans} == xn ] || [ x${ans} == xN ]
then
   echo " No orchestration attempted"
else

source $installdir/admin-openrc.sh

file=/tmp/test-stack.yml
flav=`nova flavor-list | grep [0-9] | awk '{print $4}' | head -1`
extnet=`neutron net-list | grep ext-net | awk '{print $2}'`
intnet=`neutron net-list | grep $PROJECT-net | awk '{print $2}'`
intsubnet=`neutron subnet-list | grep $PROJECT-subnet | awk '{print $2}'`
volsize=1

echo "heat_template_version: 2013-05-23" > $file
echo "description: Test Template" >> $file
echo "parameters:" >> $file
echo "  server_name:" >> $file
echo "    type: string" >> $file
echo "    description: test-server" >> $file
echo "  image:" >> $file
echo "    type: string" >> $file
echo "    description: cirros name" >> $file
echo "    default: cirros-0.3.4-x86_64" >> $file
echo "  flavor:" >> $file
echo "    type: string" >> $file
echo "    description: Flavor" >> $file
echo "    default: ${flav}" >> $file
echo "    constraints:" >> $file
echo "      - allowed_values: [${flav}]" >> $file
echo "  public_net_id:" >> $file
echo "    type: string" >> $file
echo "    description: ID of the external network" >> $file
echo "    default: ${extnet}" >> $file
echo "  private_net_id:" >> $file
echo "    type: string" >> $file
echo "    description: ID of the internal network" >> $file
echo "    default: ${intnet}" >> $file
echo "  private_subnet_id:" >> $file
echo "    type: string" >> $file
echo "    description: ID of private sub network " >> $file
echo "    default: ${intsubnet}" >> $file
echo "  volume_size:" >> $file
echo "    type: number" >> $file
echo "    description: Size of the volume to be created." >> $file
echo "    default: ${volsize}" >> $file
echo "    constraints:" >> $file
echo "      - range: { min: 1, max: 1024 }" >> $file
echo "        description: must be between 1 and 1024 Gb." >> $file
echo "" >> $file

echo "resources:" >> $file
echo "  server:" >> $file
echo "    type: OS::Nova::Server" >> $file
echo "    properties:" >> $file
echo "      name: { get_param: server_name }" >> $file
echo "      image: { get_param: image }" >> $file
echo "      flavor: { get_param: flavor }" >> $file
echo "      networks:" >> $file
echo "        - port: { get_resource: server_port }" >> $file
echo "" >> $file

echo "  server_port:" >> $file
echo "    type: OS::Neutron::Port" >> $file
echo "    properties:" >> $file
echo "      network_id: { get_param: private_net_id }" >> $file
echo "      fixed_ips:" >> $file
echo "        - subnet_id: { get_param: private_subnet_id }" >> $file
echo "      security_groups: [{ get_resource: server_security_group }]" >> $file
echo "" >> $file

echo "  server_floating_ip:" >> $file
echo "    type: OS::Neutron::FloatingIP" >> $file
echo "    properties:" >> $file
echo "      floating_network_id: { get_param: public_net_id }" >> $file
echo "      port_id: { get_resource: server_port }" >> $file

echo "  server_security_group:" >> $file
echo "    type: OS::Neutron::SecurityGroup" >> $file
echo "    properties:" >> $file
echo "      description: Heat test security group -- remove when test has completed" >> $file
echo "      name: heat-testsg" >> $file
echo "      rules:" >> $file
echo "        - remote_ip_prefix: 0.0.0.0/0" >> $file
echo "          protocol: tcp" >> $file
echo "          port_range_min: 22" >> $file
echo "          port_range_max: 22" >> $file
echo "        - remote_ip_prefix: 0.0.0.0/0" >> $file
echo "          protocol: icmp" >> $file
echo "" >> $file

echo "  cinder_volume:" >> $file
echo "    type: OS::Cinder::Volume" >> $file
echo "    properties:" >> $file
echo "      size: { get_param: volume_size }" >> $file
echo "  volume_attachment:" >> $file
echo "    type: OS::Cinder::VolumeAttachment" >> $file
echo "    properties:" >> $file
echo "      volume_id: { get_resource: cinder_volume }" >> $file
echo "      instance_uuid: { get_resource: server }" >> $file
echo "" >> $file

echo "outputs:" >> $file
echo "  server_private_ip:" >> $file
echo "    description: IP address of server on private network" >> $file
echo "    value: { get_attr: [ server, first_address ] }" >> $file
echo "  server_public_ip:" >> $file
echo "    description: Floating IP address of server on public network" >> $file
echo "    value: { get_attr: [ server_floating_ip, floating_ip_address ] }" >> $file
echo "" >> $file

source $installdir/$PROJECT-openrc.sh
heat stack-create -f /tmp/test-stack.yml -P "server_name=test-server" testStack
rm -rf /tmp/test-stack.yml

tput bold; tput setaf 4;
echo
echo " To view progress, login to Horizon and verify "
tput setab 0; tput setaf 7; tput sgr0
echo
echo "   o Orchestration   - stack created"
echo "   o Cinder          - volume created and attached"
echo "   o Nova            - instance created"
echo "   o Floating IP     - associated with instance"
echo "   o Reboot VM       - check volume is attached"
echo "   o Security Group  - check for heat-testsg"
echo

   echo -n " Clean-up Heat Test VM (y/[n]): "
   read ans
   if [ x${ans} != xy ] && [ x${ans} != xY ]
   then
      tput setab 0; tput setaf 7; tput sgr0
   else
      clnup=`heat stack-list | grep testStack | awk '{print$2}' | head -1`
      heat stack-delete $clnup
      tput setab 0; tput setaf 7; tput sgr0
   fi

fi

# ------------------------------------------------------------------
#  Verification
# ------------------------------------------------------------------
clear
tput cup 2 5; tput setab 4; tput bold; tput setaf 7
echo " Test Harness Summary "
tput setaf 9; tput sgr0; tput cup 3 5
if [ x$ERROR == xTrue ]; then
   echo
   tput setaf 1
   echo "     ------------------------------------"
   echo "      Failure detected during evaluation "
   echo "     ------------------------------------"
   tput setaf 7
   echo
else
   echo
   tput setaf 2
   echo "     -------------------------------------"
   echo "      Hopper-Stack installed successfully "
   echo "     -------------------------------------"
   tput setaf 7
   echo
fi

