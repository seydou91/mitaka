#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2016 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

# +------------------------------------------+
# | VARIABLES                                |
# +------------------------------------------+
export TERM=vt100
if [ ! -f profile ]; then
   echo
   echo " +-------------------------------------------+"
   echo " |  No profile file found in this directory  |"
   echo " +-------------------------------------------+"
   echo
   exit
else
   source profile
fi

if [ x$ENABLE_ETCHOSTS == xTrue ]; then
   check=`cat /etc/hosts | grep Hopper | awk '{print $1}'`
   if [ x$check == x ]; then
      cat hosts-file >> /etc/hosts
   fi
fi

cd $installdir

# patch system
if [ ! -f /etc/yum.repos.d/hopper.repo ]; then
   ./patch-client
fi

# NTP
yum install -y chrony
if [ x${NTP} != xTrue ]; then
   systemctl enable chronyd.service
   if [ x$NTPSERVER != xNone ]; then
      sed -i "s/^server/# server/g" /etc/chrony.conf
      echo "server $NTPSERVER iburst" >> /etc/chrony.conf
      systemctl enable chronyd.service
      systemctl restart chronyd.service
      chronyc sources
      ntpdate -u $NTPSERVER
   fi
fi

# firewall
systemctl mask firewalld
systemctl stop firewalld
yum install -y iptables-services
systemctl stop  iptables
systemctl disable iptables
sed -i 's/enforcing/disabled/g' /etc/selinux/config
echo 0 > /sys/fs/selinux/enforce

yum install -y mysql

# +------------------------------------------+
# | INSTALL PACKAGES                         |
# +------------------------------------------+
yum install -y yum-plugin-priorities
yum install -y crudini
yum install -y haproxy
yum install -y keepalived

if [ x${ENABLE_NAGIOS} == xTrue ]; then
   yum install -y percona-nagios-plugins
   yum install -y nrpe
   yum install -y nagios-plugins-all
   yum install -y openssl
fi

if [[ x$ENABLE_AMANDA == xTrue && ! -f /var/lib/amanda/.amandahosts ]]; then
   yum install -y amanda amanda-client
fi

# +------------------------------------------+
# | HAPROXY                                  |
# +------------------------------------------+
echo "\$ModLoad imudp" > /etc/rsyslog.d/haproxy.conf
echo "\$UDPServerRun 514" >> /etc/rsyslog.d/haproxy.conf
echo "\$template Haproxy,\"%msg%\n\"" >> /etc/rsyslog.d/haproxy.conf
echo "local0.=info /var/log/haproxy.log;Haproxy" >> /etc/rsyslog.d/haproxy.conf
echo "local0.notice /var/log/haproxystatus.log;Haproxy" >> /etc/rsyslog.d/haproxy.conf
echo "local0.* ~" >> /etc/rsyslog.d/haproxy.conf

service rsyslog restart

# /etc/haproxy/haproxy.cfg
FILE=/etc/haproxy/haproxy.cfg

# global
echo "global" > ${FILE}
echo "        daemon" >> ${FILE}
echo "        group   haproxy" >> ${FILE}
echo "        pidfile /var/run/haproxy.pid" >> ${FILE}
echo "        maxconn 4000" >> ${FILE}
echo "        user    haproxy" >> ${FILE}
echo "        chroot  /var/lib/haproxy" >> ${FILE}
echo "" >> ${FILE}

# defaults
echo "defaults" >> ${FILE}
echo "        log     127.0.0.1 local2 warning" >> ${FILE}
echo "        maxconn 4000" >> ${FILE}
echo "        option  redispatch" >> ${FILE}
echo "        retries 3" >> ${FILE}
echo "        timeout http-request 10s" >> ${FILE}
echo "        timeout queue    1m" >> ${FILE}
echo "        timeout connect 10s" >> ${FILE}
echo "        timeout client   1m" >> ${FILE}
echo "        timeout server   1m" >> ${FILE}
echo "        timeout check   10s" >> ${FILE}
echo "" >> ${FILE}

# statistics
echo "listen stats" >> ${FILE}
echo "        bind    *:80" >> ${FILE}
echo "        mode    http" >> ${FILE}
echo "        stats   enable" >> ${FILE}
echo "" >> ${FILE}

# mariadb
echo "listen galera-cluster" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:3306" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        timeout queue   45s" >> ${FILE}
echo "        timeout connect  5s" >> ${FILE}
echo "        timeout client   1m" >> ${FILE}
echo "        timeout server   1m" >> ${FILE}
echo "        timeout check   10s" >> ${FILE}
echo "        maxconn 1020" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server mariadb$x ${i}:3306 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# keystone admin
echo "listen keystone_admin" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:35357" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server keystone-admin$x ${i}:35357 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# keystone api
echo "listen keystone_api" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:5000" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server keystone-api$x ${i}:5000 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# swift proxy
echo "listen swift_proxy" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:8080" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server swift-proxy$x ${i}:8080 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# glance api
echo "listen glance_api" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:9292" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep STORAGE_NODE | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server glance-api$x ${i}:9292 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# glance registry
echo "listen glance_registry" >> ${FILE}
echo "        bind   ${VIPSERVXHN}:9191" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        mode   tcp" >> ${FILE}
echo "        option tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep STORAGE_NODE | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server glance-registry$x ${i}:9191 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# cinder api
echo "listen cinder_api" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:8776" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server cinder-api$x ${i}:8776 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "" >> ${FILE}

# nova ec2
echo "listen nova_ec2" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:8773" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server nova-node$x ${i}:8773 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# nova osapi
echo "listen nova_osapi" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:8774" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server nova-node$x ${i}:8774 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# nova metadata
echo "listen nova_metadata" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:8775" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server nova-node$x ${i}:8775 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# nova novncproxy
echo "listen novncproxy" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:6080" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        maxconn 10000" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server novnc$x ${i}:6080 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}


# dashboard
echo "listen dashboard" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:80" >> ${FILE}
echo "        cookie  SERVERID insert indirect nocache" >> ${FILE}
echo "        mode    http" >> ${FILE}
echo "        option  forwardfor" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
echo "        option  httpclose" >> ${FILE}
echo "        rspidel ^Set-cookie:\ IP=" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server horizon-node$x ${i}:80 cookie horizon-node$x check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# neuron api
echo "listen neutron_api" >> ${FILE}
echo "        bind    ${VIPSERVXHN}:9696" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        option  tcpka" >> ${FILE}
echo "        option  httpchk" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server neutron-node$x ${i}:9696 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# ceilometer cluster
echo "listen ceilometer_cluster ${VIPSERVXHN}:8777" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server ceilometer-node$x ${i}:8777 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# alarm cluster
echo "listen alarm_cluster ${VIPSERVXHN}:8042" >> ${FILE}
echo "        balance source" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server alarm-node$x ${i}:8042 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# heat api
echo "listen heat_api ${VIPSERVXHN}:8000" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server heat-api$x ${i}:8000 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# heat cloud formation
echo "listen heat_cfn ${VIPSERVXHN}:8004" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server heat-cfn$x ${i}:8004 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# manila
echo "listen manila ${VIPSERVXHN}:8786" >> ${FILE}
echo "        mode    tcp" >> ${FILE}
echo "        option  tcplog" >> ${FILE}
declare -a arr1=(`cat $installdir/profile | grep CONTROLLER | awk -F= '{print $2}'`)
x=0
for i in ${arr1[@]}; do
    let x=x+1
        echo "        server manila$x ${i}:8786 check inter 2000 rise 2 fall 5" >> ${FILE}
done
echo "          " >> ${FILE}

# +------------------------------------------+
# | KEEPALIVE                                |
# +------------------------------------------+
echo "net.ipv4.ip_nonlocal_bind=1" >> /etc/sysctl.conf
sysctl -p

# /etc/keepalived/keepalived.conf
FILE=/etc/keepalived/keepalived.conf

echo "vrrp_script chk_haproxy {" > ${FILE}
echo "     script \"killall -0 haproxy\"" >> ${FILE}
echo "     interval 2" >> ${FILE}
echo "     weight 2" >> ${FILE}
echo "}" >> ${FILE}
echo "" >> ${FILE}
echo "vrrp_instance VI_1 {" >> ${FILE}
echo "     interface ${VIP_INTERFACE}" >> ${FILE}
echo "     state MASTER" >> ${FILE}
echo "     virtual_router_id 51" >> ${FILE}
echo "" >> ${FILE}

echo "     unicast_src_ip ${THISHOST_HOST_IP}" >> ${FILE}
echo "     unicast_peer {" >> ${FILE}
echo "        ${OTHER_HOST_IP}" >> ${FILE}
echo "     }" >> ${FILE}
echo "" >> ${FILE}

echo "     priority ${PRIORITY}" >> ${FILE}
echo "     virtual_ipaddress {" >> ${FILE}
echo "             ${VIP_ADDRESS}" >> ${FILE}
echo "     }" >> ${FILE}
echo "" >> ${FILE}

echo "     track_script {" >> ${FILE}
echo "             chk_haproxy" >> ${FILE}
echo "     }" >> ${FILE}
echo "}" >> ${FILE}

systemctl enable keepalived
systemctl enable haproxy
systemctl restart keepalived
systemctl restart haproxy

# +------------------------------------------+
# | MONITORING                               |
# +------------------------------------------+
if [ x${ENABLE_NAGIOS} == xTrue ]; then
   ./nagios-client
fi

# +------------------------------------------+
# | DNS                                      |
# +------------------------------------------+
if [ x$ENABLE_DNS == xTrue ]; then
   ./dns-client
fi

# +------------------------------------------+
# | BACKUP                                   |
# +------------------------------------------+
if [ x$ENABLE_AMANDA == xTrue ]; then
   ./amanda-client
fi

# +------------------------------------------+
# | ANTI-VIRUS                               |
# +------------------------------------------+
if [ x$ENABLE_CLAMAV == x"True" ]; then
   ./clamav-server
fi

# +------------------------------------------+
# | LOGSTASH                                 |
# +------------------------------------------+
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   echo "logstash"
   ./logstash-client
fi

systemctl restart keepalived
systemctl restart haproxy
echo "End haproxy"

