#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2016 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

# +------------------------------------------+
# | VARIABLES                                |
# +------------------------------------------+
export TERM=vt100
if [ ! -f profile ]; then
   echo
   echo " +-------------------------------------------+"
   echo " |  No profile file found in this directory  |"
   echo " +-------------------------------------------+"
   echo
   exit
else
   source profile
fi

if [ x$ENABLE_ETCHOSTS == xTrue ]; then
   check=`cat /etc/hosts | grep Hopper | awk '{print $1}'`
   if [ x$check == x ]; then
      cat hosts-file >> /etc/hosts
   fi
fi


cd ${installdir}

# credentail 
unset OS_TOKEN
unset OS_URL
unset OS_IDENTITY_API_VERSION

echo "export OS_PROJECT_DOMAIN_NAME=default" > admin-openrc.sh
echo "export OS_USER_DOMAIN_NAME=default" >> admin-openrc.sh
echo "export OS_PROJECT_NAME=admin" >> admin-openrc.sh
echo "export OS_USERNAME=admin" >> admin-openrc.sh
echo "export OS_PASSWORD=$ADMIN_PASS" >> admin-openrc.sh
echo "export OS_AUTH_URL=http://$VIPSERVXHN:35357/v3" >> admin-openrc.sh
echo "export OS_IDENTITY_API_VERSION=3" >> admin-openrc.sh

echo "export OS_PROJECT_DOMAIN_NAME=default" > $PROJECT-openrc.sh
echo "export OS_USER_DOMAIN_NAME=default" >> $PROJECT-openrc.sh
echo "export OS_PROJECT_NAME=$PROJECT" >> $PROJECT-openrc.sh
echo "export OS_USERNAME=$PROJECT" >> $PROJECT-openrc.sh
echo "export OS_PASSWORD=$PROJECT" >> $PROJECT-openrc.sh
echo "export OS_AUTH_URL=http://$VIPSERVXHN:5000/v3" >> $PROJECT-openrc.sh
echo "export OS_IDENTITY_API_VERSION=3" >> $PROJECT-openrc.sh

echo "export OS_IMAGE_API_VERSION=2" >> admin-openrc.sh
echo "export OS_IMAGE_API_VERSION=2" >> $PROJECT-openrc.sh

source admin-openrc.sh

echo "" > /tmp/yes
echo "" > /tmp/yes
ssh-keygen -N "" < /tmp/yes

# patch system
if [ ! -f /etc/yum.repos.d/hopper.repo ]; then
   ./patch-client
fi

# NTP
yum install -y chrony
if [ x$NTPSERVER != xNone ]; then
   sed -i "s/^server/# server/g" /etc/chrony.conf
   echo "server $NTPSERVER iburst" >> /etc/chrony.conf
   systemctl enable chronyd.service
   systemctl restart chronyd.service
   chronyc sources
   ntpdate -u $NTPSERVER
fi

# firewall
systemctl mask firewalld
systemctl stop firewalld
yum -y install iptables-services
systemctl stop  iptables
systemctl disable iptables
sed -i 's/enforcing/disabled/g' /etc/selinux/config
echo 0 > /sys/fs/selinux/enforce

echo 'net.ipv4.conf.all.rp_filter=0' >> /etc/sysctl.conf
echo 'net.ipv4.conf.default.rp_filter=0' >> /etc/sysctl.conf
echo 'net.bridge.bridge-nf-call-iptables=1' >> /etc/sysctl.conf
echo 'net.bridge.bridge-nf-call-ip6tables=1' >> /etc/sysctl.conf
sysctl -p

# +------------------------------------------+
# | INSTALL PACAKGES                         |
# +------------------------------------------+
yum install -y yum-plugin-priorities
yum install -y crudini

yum install -y openstack-keystone
yum install -y python-openstackclient

yum install -y openstack-nova-compute
yum install -y sysfsutils 

yum install -y openstack-neutron
yum install -y openstack-neutron-ml2
yum install -y openstack-neutron-openvswitch

yum install -y openstack-ceilometer-compute
yum install -y python-ceilometerclient
yum install -y python-pecan

yum install -y openstack-cinder
yum install -y targetcli
yum install -y python-oslo-policy

yum install -y python-oslo-db
yum install -y python-oslo-log
yum install -y MySQL-python

yum install -y python-cinderclient
yum install -y python-oslo-db

if [ x${ENABLE_NAGIOS} == xTrue ]; then
   yum install -y percona-nagios-plugins
   yum install -y nrpe
   yum install -y nagios-plugins-all
   yum install -y openssl
fi

if [[ x$ENABLE_AMANDA == xTrue && ! -f /var/lib/amanda/.amandahosts ]]; then
   yum install -y amanda amanda-client
fi

# +------------------------------------------+
# | NOVA                                     |
# +------------------------------------------+
CFILE=/etc/nova/nova.conf

# [DEFAULT]
crudini --set $CFILE DEFAULT rpc_backend rabbit

# [oslo_messaging_rabbit]
crudini --set $CFILE oslo_messaging_rabbit rabbit_hosts $CONTROLLER_IP:5672,$SECONDARY_CNTL_IP:5672,$TERTIARY_CNTRL_IP:5672
crudini --set $CFILE oslo_messaging_rabbit rabbit_userid openstack
crudini --set $CFILE oslo_messaging_rabbit rabbit_password ${RABBIT_PASS}

# [DEFAULT]
crudini --set $CFILE DEFAULT auth_strategy keystone

crudini --set $CFILE DEFAULT memcached_servers $CONTROLLER_IP:11211,$SECONDARY_CNTL_IP:11211,$TERTIARY_CNTRL_IP:11211

# [keystone_authtoken]
crudini --del $CFILE keystone_authtoken
crudini --set $CFILE keystone_authtoken auth_uri http://$VIPSERVXHN:5000
crudini --set $CFILE keystone_authtoken auth_url http://$VIPSERVXHN:35357
crudini --set $CFILE keystone_authtoken memcached_servers $CONTROLLER_IP:11211,$SECONDARY_CNTL_IP:11211,$TERTIARY_CNTRL_IP:11211
crudini --set $CFILE keystone_authtoken auth_type password
crudini --set $CFILE keystone_authtoken project_domain_name default
crudini --set $CFILE keystone_authtoken user_domain_name default
crudini --set $CFILE keystone_authtoken project_name service
crudini --set $CFILE keystone_authtoken username nova
crudini --set $CFILE keystone_authtoken password $SERVICE_PASS

crudini --set $CFILE DEFAULT my_ip $THISHOST_IP
crudini --set $CFILE DEFAULT use_neutron True
crudini --set $CFILE DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver

crudini --set $CFILE DEFAULT verbose True

# [vnc]
crudini --set $CFILE vnc enabled True
crudini --set $CFILE vnc vncserver_listen 0.0.0.0
crudini --set $CFILE vnc vncserver_proxyclient_address $THISHOST_IP
crudini --set $CFILE vnc novncproxy_base_url http://$VIPSERVXHN:6080/vnc_auto.html

# [DEFAULT]
crudini --set $CFILE DEFAULT compute_driver libvirt.LibvirtDriver

# [glance]
crudini --set $CFILE glance host $VIPSERVXHN
crudini --set $CFILE glance api_servers http://$VIPSERVXHN:9292

# [oslo_concurrency]
crudini --set $CFILE oslo_concurrency lock_path /var/lib/nova/tmp

# [libvirt]
crudini --set $CFILE libvirt virt_type $HYPERVISOR

for svc in libvirtd openstack-nova-compute ; do
   systemctl enable $svc
   systemctl restart $svc
done

# +------------------------------------------+
# | NEUTRON                                  |
# +------------------------------------------+
CFILE=/etc/neutron/neutron.conf

# [DEFAULT]
crudini --set $CFILE DEFAULT rpc_backend rabbit

crudini --set $CFILE DEFAULT memcached_servers $CONTROLLER_IP:11211,$SECONDARY_CNTL_IP:11211,$TERTIARY_CNTRL_IP:11211

# [oslo_messaging_rabbit]
crudini --set $CFILE oslo_messaging_rabbit rabbit_hosts $CONTROLLER_IP:5672,$SECONDARY_CNTL_IP:5672,$TERTIARY_CNTRL_IP:5672
crudini --set $CFILE oslo_messaging_rabbit rabbit_userid openstack
crudini --set $CFILE oslo_messaging_rabbit rabbit_password ${RABBIT_PASS}

# [DEFAULT]
crudini --set $CFILE DEFAULT auth_strategy keystone

# [keystone_authtoken]
crudini --del $CFILE keystone_authtoken
crudini --set $CFILE keystone_authtoken auth_uri http://$VIPSERVXHN:5000
crudini --set $CFILE keystone_authtoken auth_url http://$VIPSERVXHN:35357
crudini --set $CFILE keystone_authtoken memcached_servers $CONTROLLER_IP:11211,$SECONDARY_CNTL_IP:11211,$TERTIARY_CNTRL_IP:11211
crudini --set $CFILE keystone_authtoken auth_type password
crudini --set $CFILE keystone_authtoken project_domain_name default
crudini --set $CFILE keystone_authtoken user_domain_name default
crudini --set $CFILE keystone_authtoken project_name service
crudini --set $CFILE keystone_authtoken username neutron
crudini --set $CFILE keystone_authtoken password $SERVICE_PASS

# [DEFAULT]
crudini --set $CFILE DEFAULT core_plugin ml2
crudini --set $CFILE DEFAULT service_plugins router
crudini --set $CFILE DEFAULT allow_overlapping_ips True
crudini --set $CFILE DEFAULT verbose True

# /etc/neutron/plugins/ml2/ml2_conf.ini
CFILE=/etc/neutron/plugins/ml2/ml2_conf.ini

if [ x$TUNNELTYPE == x1 ]; then
   # [ml2]
   crudini --set $CFILE ml2 type_drivers flat,gre
   crudini --set $CFILE ml2 tenant_network_types gre
   crudini --set $CFILE ml2 mechanism_drivers openvswitch

   # [ml2_type_gre]
   crudini --set $CFILE ml2_type_gre tunnel_id_ranges 1:1000
else
   # [ml2]
   crudini --set $CFILE ml2 type_drivers flat,vxlan
   crudini --set $CFILE ml2 tenant_network_types vxlan
   crudini --set $CFILE ml2 mechanism_drivers openvswitch

   # [ml2_type_vxlan]
   crudini --set $CFILE ml2_type_vxlan vni_ranges 1:1000
fi

# [securitygroup]
crudini --set $CFILE securitygroup firewall_driver neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
crudini --set $CFILE securitygroup enable_security_group True
crudini --set $CFILE securitygroup enable_ipset True

# [ovs]
crudini --set $CFILE ovs local_ip $THISHOST_TUNNEL_IP
crudini --set $CFILE ovs enable_tunneling True

if [ x$TUNNELTYPE == x1 ]; then
   # [agent]
   crudini --set $CFILE agent tunnel_types gre
else
   # [agent]
   crudini --set $CFILE agent tunnel_types vxlan
fi

# VLAN network
CFILE=/etc/neutron/plugins/ml2/ml2_conf.ini
if [ x$MGTVLAN == xTrue ]; then
   # [ml2]
   SP=`crudini --get $CFILE ml2 type_drivers`
   crudini --set $CFILE ml2 type_drivers $SP,vlan

   SP=`crudini --get $CFILE ml2 tenant_network_types`
   crudini --set $CFILE ml2 tenant_network_types $SP,vlan

   crudini --set $CFILE ml2 mechanism_drivers openvswitch

   # [ml2_type_vlan]
   RNG=`echo $MGTRANGE | sed s/-/:/`
   crudini --set $CFILE ml2_type_vlan network_vlan_ranges physnet2:$RNG

   # [ovs]
   crudini --set $CFILE ovs network_vlan_ranges physnet2:$RNG
   crudini --set $CFILE ovs bridge_mappings physnet2:br-vlan
fi

# /etc/neutron/plugins/ml2/openvswitch_agent.ini
CFILE=/etc/neutron/plugins/ml2/openvswitch_agent.ini

crudini --set $CFILE ovs integration_bridge br-int
crudini --set $CFILE ovs tunnel_bridge br-tun
crudini --set $CFILE ovs local_ip $THISHOST_TUNNEL_IP
crudini --set $CFILE ovs enable_tunneling True
crudini --set $CFILE ovs int_peer_patch_port patch-tun
crudini --set $CFILE ovs tun_peer_patch_port patch-int

crudini --set $CFILE securitygroup firewall_driver neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
crudini --set $CFILE securitygroup enable_security_group True
crudini --set $CFILE securitygroup enable_ipset True

if [ x$TUNNELTYPE == x1 ]; then
   # [agent]
   crudini --set $CFILE agent tunnel_types gre
else
   # [agent]
   crudini --set $CFILE agent tunnel_types vxlan
fi

if [ x$MGTVLAN == xTrue ]; then
   crudini --set $CFILE ovs bridge_mappings physnet2:br-vlan
fi

systemctl enable openvswitch.service
systemctl restart openvswitch.service

# /etc/nova/nova.conf
CFILE=/etc/nova/nova.conf

# [DEFAULT]
crudini --set $CFILE DEFAULT network_api_class nova.network.neutronv2.api.API
crudini --set $CFILE DEFAULT security_group_api neutron
crudini --set $CFILE DEFAULT linuxnet_interface_driver nova.network.linux_net.LinuxOVSInterfaceDriver
crudini --set $CFILE DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver

# [neutron]
crudini --set $CFILE neutron url http://$VIP_ADDRESS:9696
crudini --set $CFILE neutron auth_url http://$VIP_ADDRESS:35357
crudini --set $CFILE neutron auth_type password
crudini --set $CFILE neutron project_domain_name default
crudini --set $CFILE neutron user_domain_name default
crudini --set $CFILE neutron region_name RegionOne
crudini --set $CFILE neutron project_name service
crudini --set $CFILE neutron username neutron
crudini --set $CFILE neutron password $SERVICE_PASS

ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

for svc in nova-compute ; do
   systemctl enable openstack-$svc
   systemctl restart openstack-$svc
done

for svc in openvswitch-agent ; do
   systemctl enable neutron-$svc
   systemctl start neutron-$svc
done

if [ x$MGTVLAN == xTrue ]; then
   ovs-vsctl add-br br-vlan
   ovs-vsctl add-port br-vlan $COMPPROJNIC
fi

# +------------------------------------------+
# | CINDER                                   |
# +------------------------------------------+
CFILE=/etc/cinder/cinder.conf

# [database]
crudini --set $CFILE database connection  mysql+pymysql://cinder:$SERVICE_PASS@$VIPSERVXHN/cinder

# [DEFAULT]
crudini --set $CFILE DEFAULT rpc_backend rabbit

# [oslo_messaging_rabbit]
crudini --set $CFILE oslo_messaging_rabbit rabbit_hosts $CONTROLLER_HN:5672,$SECONDARY_CNTL_HN:5672,$TERTIARY_CNTRL_HN:5672
crudini --set $CFILE oslo_messaging_rabbit rabbit_userid openstack
crudini --set $CFILE oslo_messaging_rabbit rabbit_password ${RABBIT_PASS}

# [DEFAULT]
crudini --set $CFILE DEFAULT auth_strategy keystone

# [keystone_authtoken]
crudini --del $CFILE keystone_authtoken
crudini --set $CFILE keystone_authtoken auth_uri http://$VIPSERVXHN:5000
crudini --set $CFILE keystone_authtoken auth_url http://$VIPSERVXHN:35357
crudini --set $CFILE keystone_authtoken memcached_servers $CONTROLLER_IP:11211,$SECONDARY_CNTL_IP:11211,$TERTIARY_CNTRL_IP:11211
crudini --set $CFILE keystone_authtoken auth_type password
crudini --set $CFILE keystone_authtoken project_domain_name default
crudini --set $CFILE keystone_authtoken user_domain_name default
crudini --set $CFILE keystone_authtoken project_name service
crudini --set $CFILE keystone_authtoken username cinder
crudini --set $CFILE keystone_authtoken password $SERVICE_PASS

# [DEFAULT]
crudini --set $CFILE DEFAULT my_ip $THISHOST_IP

# [DEFAULT]
crudini --set $CFILE DEFAULT glance_host $VIPSERVXHN
crudini --set $CFILE DEFAULT glance_api_servers http://$VIPSERVXHN:9292

# [oslo_concurrency]
crudini --set $CFILE oslo_concurrency lock_path /var/lib/cinder/tmp

# +------------------------------------------+
# | CINDER / GLUSTER                         |
# +------------------------------------------+
if [ x$ENABLE_GLUSTER == xTrue ]; then

   # install
   yum -y install glusterfs glusterfs-fuse glusterfs-server
   systemctl start glusterd

   echo "$GLUSTERSHAREHOST:/$CINDER_VOL" > /etc/cinder/shares.conf
   chown root:cinder /etc/cinder/shares.conf
   chmod 0640 /etc/cinder/shares.conf

   systemctl enable glusterd
   systemctl restart glusterd
   sleep 1

   # /etc/cinder/cinder.conf
   CFILE=/etc/cinder/cinder.conf

   crudini --set $CFILE DEFAULT enabled_backends glusterfs-driver
   crudini --set $CFILE glusterfs-driver volume_driver cinder.volume.drivers.glusterfs.GlusterfsDriver
   crudini --set $CFILE glusterfs-driver glusterfs_shares_config /etc/cinder/shares.conf
   crudini --set $CFILE glusterfs-driver glusterfs_mount_point_base /var/lib/cinder/volumes
   crudini --set $CFILE glusterfs-driver volume_backend_name gluster-driver

   crudini --set $CFILE DEFAULT default_volume_type gluster-driver

   sleep 5
   systemctl restart target.service
   systemctl restart openstack-nova-compute.service

   # customisation
   source admin-openrc.sh
   TYPCHK=`cinder type-list | grep -i Gluster | awk '{print $1}'`
   if [ x$TYPCHK == x ]; then
      cinder type-create gluster-driver
   fi
   cinder type-key gluster-driver set volume_backend_name=gluster-driver
   sleep 3

   # restart services
   ssh -i $installdir/ssh-key -o StrictHostKeyChecking=no root@$CONTROLLER_HN 'systemctl restart target.service; for i in scheduler api; do systemctl restart openstack-cinder-${i} ; done'
   ssh -i $installdir/ssh-key -o StrictHostKeyChecking=no root@$SECONDARY_CNTL_HN 'systemctl restart target.service; for i in scheduler api; do systemctl restart openstack-cinder-${i} ; done'
   ssh -i $installdir/ssh-key -o StrictHostKeyChecking=no root@$TERTIARY_CNTRL_HN 'systemctl restart target.service; for i in scheduler api; do systemctl restart openstack-cinder-${i} ; done'
   sleep 5
fi

# +------------------------------------------+
# | CINDER / LVM                             |
# +------------------------------------------+
if [ x$ENABLE_LVM == xTrue ]; then

   source lvm-profile

   # /etc/nova/nova.conf
   CFILE=/etc/nova/nova.conf
   crudini --set $CFILE DEFAULT default_availability_zone Hopper-Direct${LVMNODE}

   echo "aggregates"
   nova aggregate-create aggregate${LVMNODE} Hopper-Direct${LVMNODE}
   HSTNAME=`hostname`
   ADDHOST=`nova host-list | grep $HSTNAME | awk '{print $2}'`
   AGGID=`nova aggregate-list | grep Hopper-Direct${LVMNODE} | awk '{print $2}'`
   echo "add host to aggregate"
   nova aggregate-add-host ${AGGID} ${ADDHOST}

   # /etc/cinder/cinder.conf 
   CFILE=/etc/cinder/cinder.conf
   crudini --set $CFILE DEFAULT storage_availability_zone Hopper-Direct${LVMNODE}

   CHKBEND=`cat /etc/cinder/cinder.conf | grep ^enabled_backends | \
   awk '{print $1}'`
   if [ x$CHKBEND == x ]; then
      crudini --set --list $CFILE DEFAULT enabled_backends lvm-driver
   else
      sed -i "/^enabled_backends/ s/$/,lvm-driver/" /etc/cinder/cinder.conf
   fi

   crudini --set $CFILE lvm-driver iscsi_ip_address ${THISHOST_COMPSTORAGE_IP}
   crudini --set $CFILE lvm-driver volume_driver cinder.volume.drivers.lvm.LVMVolumeDriver
   crudini --set $CFILE lvm-driver volume_group cinder-volumes
   crudini --set $CFILE lvm-driver volume_backend_name lvm-driver
   crudini --set $CFILE lvm-driver iscsi_protocol iscsi
   crudini --set $CFILE lvm-driver iscsi_helper lioadm

   crudini --set $CFILE lvm-driver volume_clear $CINDER_DELETE

   crudini --set $CFILE DEFAULT default_volume_type lvm-driver

   # restart services
   systemctl restart openstack-nova-compute.service

   # customisation
   source admin-openrc.sh
   TYPCHK=`cinder type-list | grep lvm-driver | awk '{print $1}'`
   if [ x$TYPCHK == x ]; then
      echo "types"
      cinder type-create lvm-driver
   fi
   cinder type-key lvm-driver set volume_backend_name=lvm-driver
   sleep 3
fi

# +------------------------------------------+
# | CINDER / BLOCK                           |
# +------------------------------------------+
if [ x$ENABLE_BLOCK == xTrue ]; then

   source block-profile

   # /etc/nova/nova.conf
   CFILE=/etc/nova/nova.conf
   crudini --set $CFILE DEFAULT default_availability_zone Hopper-Direct${BLOCKNODE}

   echo "aggregates"
   nova aggregate-create aggregate${BLOCKNODE} Hopper-Direct${BLOCKNODE}
   HSTNAME=`hostname`
   ADDHOST=`nova host-list | grep $HSTNAME | awk '{print $2}'`
   AGGID=`nova aggregate-list | grep Hopper-Direct${BLOCKNODE} | awk '{print $2}'`
   echo "add host to aggregate"
   nova aggregate-add-host ${AGGID} ${ADDHOST}

   # /etc/cinder/cinder.conf
   CFILE=/etc/cinder/cinder.conf
   crudini --set $CFILE DEFAULT storage_availability_zone Hopper-Direct${BLOCKNODE}

   CHKBEND=`cat /etc/cinder/cinder.conf | grep ^enabled_backends | \
   awk '{print $1}'`

   if [ x$CHKBEND == x ]; then
      crudini --set $CFILE DEFAULT enabled_backends block-driver
   else
      sed -i "/^enabled_backends/ s/$/,block-driver/" /etc/cinder/cinder.conf
   fi

   CDEVICES=`echo $CINDER_DISK | cut -f2 -d:`

   CFILE=/etc/cinder/cinder.conf
   crudini --set $CFILE block-driver volume_driver cinder.volume.drivers.block_device.BlockDeviceDriver
   crudini --set $CFILE block-driver available_devices \'$CDEVICES\'
   crudini --set $CFILE block-driver volume_backend_name BLOCK
   crudini --set $CFILE block-driver iscsi_helper lioadm

   crudini --set $CFILE block-driver volume_clear $CINDER_DELETE

   crudini --set $CFILE DEFAULT default_volume_type block-driver

   # restart services
   systemctl restart openstack-nova-compute.service

   # customisation
   source $installdir/admin-openrc.sh
   TYPCHK=`cinder type-list | grep block-driver | awk '{print $1}'`
   if [ x$TYPCHK == x ]; then
      echo "types"
      cinder type-create block-driver
   fi
   cinder type-key block-driver set volume_backend_name=BLOCK
   sleep 3
fi

# +------------------------------------------+
# | CINDER / DISTRIBUTED                     |
# +------------------------------------------+
if [[ x$ENABLE_BLOCK != xTrue && x$ENABLE_LVM != xTrue ]]; then

   # /etc/nova/nova.conf
   CFILE=/etc/nova/nova.conf
   crudini --set $CFILE DEFAULT default_availability_zone Hopper-Distributed

   # /etc/cinder/cinder.conf
   CFILE=/etc/cinder/cinder.conf
   crudini --set $CFILE DEFAULT storage_availability_zone Hopper-Distributed
fi

# /etc/nova/nova.conf
CFILE=/etc/nova/nova.conf

# [cinder]
crudini --set $CFILE cinder os_region_name RegionOne

# restart services
sleep 5
for svc in openstack-nova-compute.service openstack-cinder-volume target ; do
   systemctl enable $svc
   systemctl restart $svc
done

cd $installdir

sleep 30

# flavor
FLAVOR="a1.tiny"
FLVRCHK=`nova flavor-list| grep ${FLAVOR} | awk -F "|" '{print $3}'`

if [ x"${FLVRCHK}" != x ]; then
   echo "flavor ${FLAVOR}"
else
   for i in `nova flavor-list|awk '{print $4}'|grep -v Name|grep [a-zA-Z0-9]`
   do
      nova flavor-delete $i
   done
   cat $installdir/profile | grep ^FLAVOR | sed "s/FLAVOR/nova flavor-create/" \
   | sed "s/=\"/ /" | cut -d\" -f1  > /tmp/flavorlist
   source /tmp/flavorlist
   rm -f /tmp/flavorlist
fi

# +------------------------------------------+
# | CEILOMETER                               |
# +------------------------------------------+
if [ x$CEILOMETER == xTrue ]; then

   # /etc/ceilometer/ceilometer.conf
   CFILE=/etc/ceilometer/ceilometer.conf

   # [publisher]
   crudini --set $CFILE publisher telemetry_secret dastardly

   # {DEFAULT]
   crudini --set $CFILE DEFAULT rpc_backend rabbit

aaa
   # [oslo_messaging_rabbit]
   crudini --set $CFILE oslo_messaging_rabbit rabbit_hosts $CONTROLLER_IP:5672,$SECONDARY_CNTL_IP:5672,$TERTIARY_CNTRL_IP:5672
   crudini --set $CFILE oslo_messaging_rabbit rabbit_userid openstack
   crudini --set $CFILE oslo_messaging_rabbit rabbit_password ${RABBIT_PASS}

   # [keystone_authtoken]
   crudini --set $CFILE keystone_authtoken auth_uri http://$VIPSERVXHN:5000/v2.0
   crudini --set $CFILE keystone_authtoken identity_uri http://$VIPSERVXHN:35357
   crudini --set $CFILE keystone_authtoken admin_tenant_name service
   crudini --set $CFILE keystone_authtoken admin_user ceilometer
   crudini --set $CFILE keystone_authtoken admin_password $SERVICE_PASS

   # [service_credentials]
   crudini --set $CFILE service_credentials os_auth_url http://$VIPSERVXHN:5000/v2.0
   crudini --set $CFILE service_credentials os_username ceilometer
   crudini --set $CFILE service_credentials os_tenant_name service
   crudini --set $CFILE service_credentials os_password $SERVICE_PASS
   crudini --set $CFILE service_credentials os_endpoint_type internalURL
   crudini --set $CFILE service_credentials os_region_name RegionOne

   # /etc/nova/nova.conf
   CFILE=/etc/nova/nova.conf
   crudini --set $CFILE DEFAULT instance_usage_audit True
   crudini --set $CFILE DEFAULT instance_usage_audit_period hour
   crudini --set $CFILE DEFAULT notify_on_state_change vm_and_task_state
   crudini --set $CFILE DEFAULT notification_driver messagingv2

   # restart services
   systemctl enable openstack-ceilometer-compute.service
   systemctl restart openstack-ceilometer-compute.service
   systemctl restart openstack-nova-compute.service

   # /etc/cinder/cinder.conf
   CFILE=/etc/cinder/cinder.conf

   # {DEFAULT]
   crudini --set $CFILE oslo_messaging_notifications driver messagingv2

   sleep 3

   # restart services
   for i in volume ; do systemctl restart openstack-cinder-${i} ; done
fi

# +------------------------------------------+
# | CINDER / LVM                             |
# +------------------------------------------+
if [ x$ENABLE_LVM == xTrue ]; then
   source lvm-profile
   source lvm-volume
fi

# +------------------------------------------+
# | CINDER / BLOCK                           |
# +------------------------------------------+
if [ x$ENABLE_BLOCK == xTrue ]; then
   source block-profile
   source block-volume
fi

# +------------------------------------------+
# | MONITORING                               |
# +------------------------------------------+
if [ x${ENABLE_NAGIOS} == xTrue ]; then
   ./nagios-client
fi

# +------------------------------------------+
# | DNS                                      |
# +------------------------------------------+
if [ x$ENABLE_DNS == xTrue ]; then
   ./dns-client
fi

# +------------------------------------------+
# | BACKUP                                   |
# +------------------------------------------+
if [ x$ENABLE_AMANDA == xTrue ]; then
   ./amanda-client
fi

# +------------------------------------------+
# | LDAP                                     |
# +------------------------------------------+
if [ x$ENABLE_LDAP == xTrue ]; then
   ./ldap-client
fi

# +------------------------------------------+
# | ANTI-VIRUS                               |
# +------------------------------------------+
if [ x$ENABLE_CLAMAV == x"True" ]; then
   ./clamav-server
fi

# +------------------------------------------+
# | LOGSTASH                                 |
# +------------------------------------------+
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   echo "logstash"
   ./logstash-client
fi

# +------------------------------------------+
# | RESTART NOVA                             |
# +------------------------------------------+
for svc in nova-compute ; do
   systemctl enable openstack-$svc
   systemctl restart openstack-$svc
done

echo "End compute"

